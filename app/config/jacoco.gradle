apply plugin: 'jacoco'

ext {
    coverageSourceDirs = "$project.projectDir/src/main/java"
}

jacoco {
    toolVersion = "0.7.5.201505241946"
    reportsDir = file("$buildDir/reports")
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"
    getClassDirectories().setFrom(
            fileTree(
                    dir: "$buildDir/intermediates/classes/debug",
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/*$ViewBinder*.*',
                               '**/*$InjectAdapter*.*',
                               '**/*Injector*.*',
                               '**/BuildConfig.*',
                               '**/Manifest*.*',
                               '**/*Test*.*',
                               '**/*Activity*.*',
                               '**/CiMattersApplication*.*',
                               'android/**/*.*']
            )
    )
    reports {
        xml.enabled = true
        html.enabled = true
    }
    getAdditionalSourceDirs().setFrom(files(coverageSourceDirs))
    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(
            fileTree(dir: project.buildDir, includes: [
                    'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
            ])
    )
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File("$buildDir/tmp/kotlin-classes/debug").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
}